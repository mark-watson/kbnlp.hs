module Category1Gram (onegrams) where

import qualified Data.Map as M

chemistry = M.fromList [("chemical", 3.8), ("atoms", 2.8), ("reaction", 2.65), ("energy", 2.45), ("water", 2.2), ("substance", 2.05), ("electrons", 1.8), ("atom", 1.75), ("acid", 1.65), ("solution", 1.55), ("molecule", 1.5), ("ph", 1.35), ("liquid", 1.35), ("molecules", 1.3), ("carbon", 1.3), ("bond", 1.25), ("chemistry", 0.55), ("reactions", 1.1), ("substances", 1.05), ("compound", 1.0), ("elements", 1.0), ("organic", 0.95), ("ion", 0.9), ("atomic", 0.9), ("bonds", 0.85), ("hydrogen", 0.85), ("compounds", 0.85), ("wastewater", 0.8), ("ions", 0.8), ("temperature", 0.8), ("unit", 0.8), ("pressure", 0.75), ("mass", 0.75), ("matter", 0.75), ("acids", 0.75), ("electron", 0.75), ("treatment", 0.7), ("element", 0.7), ("solids", 0.65), ("oxidation", 0.65), ("molecular", 0.65), ("concentration", 0.65), ("oxygen", 0.65), ("sewage", 0.65), ("mole", 0.6), ("structure", 0.55), ("solid", 0.55), ("volume", 0.55), ("containing", 0.55), ("measure", 0.55), ("orbitals", 0.55), ("heat", 0.55), ("particles", 0.55), ("material", 0.55), ("light", 0.5), ("gas", 0.5)]
computers = M.fromList [("network", 1.6), ("software", 1.55), ("linux", 1.2), ("device", 1.15), ("computers", 1.05), ("storage", 0.95), ("line", 0.85), ("disk", 0.75), ("unit", 0.75), ("files", 0.65), ("record", 0.65), ("programs", 0.6), ("hardware", 0.6), ("key", 0.6), ("helpline", 0.6), ("structure", 0.6), ("characters", 0.55), ("medium", 0.55), ("mail", 0.55), ("terminal", 0.5), ("ibm", 0.5)]
computers_ai = M.fromList [("ai", 6.6), ("artificial", 1.2), ("intelligent", 1.3), ("knowledge", 0.55), ("science", 1.15), ("brain", 1.05), ("symbolic", 0.95), ("algorithms", 0.85), ("turing", 0.85), ("researchers", 0.85), ("networks", 0.8), ("reasoning", 0.8), ("thought", 0.65), ("chomsky", 0.65), ("vision", 0.6), ("approach", 0.6), ("level", 0.55), ("solving", 0.55), ("mccarthy", 0.5), ("neural", 0.5), ("computers", 0.5), ("mit", 0.5)]
computers_ai_datamining = M.fromList [("database", 2.15), ("databases", 0.6), ("terabytes", 1.2), ("patterns", 1.15), ("algorithms", 1.0), ("conference", 0.95), ("knowledge", 0.65), ("bayesian", 0.8), ("artificial", 0.75), ("discovery", 0.7), ("ai", 0.7), ("records", 0.65), ("algorithm", 0.55)]
computers_ai_learning = M.fromList [("neural", 1.65), ("ai", 2.0), ("networks", 1.9), ("brain", 1.8), ("artificial", 1.7), ("network", 1.55), ("knowledge", 1.25), ("neurons", 1.1), ("algorithms", 1.1), ("professor", 1.0), ("training", 0.9), ("patterns", 0.7), ("researchers", 0.6), ("tasks", 0.6), ("algorithm", 0.6), ("semantic", 0.55), ("neuron", 0.55), ("performance", 0.55), ("computational", 0.55), ("algebra", 0.55)]
computers_ai_nlp = M.fromList [("nlp", 1.6), ("corpus", 0.75), ("tagger", 0.55)]
computers_ai_search = M.fromList [("cost", 4.95), ("node", 4.95), ("heuristic", 3.7), ("goal", 3.45), ("frontier", 2.2), ("ai", 1.95), ("sphinx", 1.45), ("lucene", 1.45), ("artificial", 1.45), ("guaranteed", 1.2), ("snippet", 1.2), ("googlebot", 1.2), ("solution", 0.95), ("exponential", 0.95), ("costs", 0.95), ("paths", 0.95), ("depth", 0.95), ("added", 0.95), ("neighbors", 0.95), ("lowest", 0.95), ("protocol", 0.95), ("exclusion", 0.95), ("robots", 0.7), ("complexity", 0.7), ("infinite", 0.7), ("exists", 0.7), ("actual", 0.7), ("intelligent", 0.7)]
computers_ai_textmining = M.fromList [("documents", 0.5), ("analytics", 0.6), ("dmoz", 0.9), ("training", 0.85), ("retrieval", 0.85), ("monash", 0.8), ("extraction", 0.8), ("database", 0.8), ("nakov", 0.7), ("categories", 0.7), ("clearforest", 0.7), ("preslav", 0.65), ("semantic", 0.5), ("clustering", 0.65), ("software", 0.65), ("algorithm", 0.6), ("knowledge", 0.5), ("acl", 0.5), ("entities", 0.5), ("technology", 0.5), ("proceedings", 0.5)]
computers_microsoft = M.fromList [("microsoft", 11.9), ("software", 1.1), ("playtech", 0.8), ("server", 0.75), ("disk", 0.55), ("boot", 0.55), ("gates", 0.5)]
computers_programming = M.fromList [("programming", 0.7), ("java", 1.5), ("lisp", 1.35), ("virusfree", 0.65), ("software", 0.55), ("scheme", 0.55), ("scala", 0.55), ("netbeans", 0.5), ("intellij", 0.5), ("eclipse", 0.5), ("ide", 0.5), ("compilers", 0.5), ("compiler", 0.5), ("programs", 0.45), ("algorithm", 0.3), ("code", 0.3), ("variables", 0.25), ("operators", 0.25), ("iteration", 0.25), ("discipline", 0.25), ("implementation", 0.25), ("modula", 0.25), ("modeling", 0.25), ("pascal", 0.25), ("pacman", 0.25), ("understand", 0.15), ("programmers", 0.15), ("debate", 0.15), ("formal", 0.15), ("instructions", 0.15), ("requirements", 0.15), ("ibm", 0.15), ("ada", 0.15), ("dasl", 0.15)]
computers_programming_cpp = M.fromList [("code", 0.65), ("library", 0.2), ("programming", 0.55), ("compilers", 0.35), ("stroustrup", 0.35), ("virtual", 0.35), ("polymorphism", 0.25), ("compilation", 0.25), ("namespace", 0.2), ("cout", 0.2), ("templates", 0.15), ("overloading", 0.2), ("generic", 0.2), ("compiler", 0.2), ("compile", 0.2), ("stl", 0.2), ("implementation", 0.2), ("operator", 0.2), ("bjarne", 0.2), ("oriented", 0.2), ("template", 0.15), ("declarations", 0.15)]
computers_programming_java = M.fromList [("java", 0.2), ("code", 0.55), ("component", 0.5), ("swing", 0.45), ("api", 0.35), ("joda", 0.3), ("mdash", 0.3), ("gwt", 0.25), ("interface", 0.25), ("ranges", 0.2), ("implementation", 0.2), ("void", 0.2), ("delegate", 0.2), ("ibm", 0.15), ("register", 0.15), ("virtual", 0.15), ("existing", 0.15), ("string", 0.15)]
computers_programming_lisp = M.fromList [("lisp", 1.15), ("code", 0.4), ("lambda", 0.4), ("programming", 0.35), ("java", 0.25), ("expression", 0.25), ("liskell", 0.2), ("lists", 0.2)]
computers_programming_ruby = M.fromList [("ruby", 0.3), ("rails", 0.2), ("irb", 0.5), ("code", 0.3), ("mysql", 0.15), ("self", 0.15), ("def", 0.15), ("array", 0.15)]
economics = M.fromList [("economics", 2.45), ("goods", 2.45), ("cost", 0.65), ("price", 0.6), ("economic", 1.8), ("economy", 1.95), ("market", 0.65), ("demand", 1.6), ("money", 0.9), ("production", 1.15), ("policy", 1.15), ("resources", 1.1), ("quantity", 1.0), ("income", 0.65), ("markets", 0.95), ("looks", 0.9), ("total", 0.9), ("trade", 0.55), ("rate", 0.8), ("exchange", 0.65), ("taxes", 0.75), ("tax", 0.65), ("capital", 0.75), ("macroeconomics", 0.75), ("terms", 0.7), ("prices", 0.7), ("gives", 0.7), ("elasticity", 0.7), ("curve", 0.7), ("unemployment", 0.7), ("costs", 0.65), ("increase", 0.65), ("equilibrium", 0.65), ("government", 0.65), ("econometrics", 0.6), ("growth", 0.6), ("fairtax", 0.55), ("nobel", 0.55), ("austrian", 0.55), ("starting", 0.55), ("average", 0.55), ("subject", 0.55), ("economists", 0.55), ("definitions", 0.5), ("letter", 0.5), ("competition", 0.5), ("microeconomics", 0.5), ("labour", 0.5)]
health = M.fromList [("blood", 3.6), ("heart", 2.25), ("disease", 1.65), ("brain", 1.35), ("cells", 1.3), ("tissue", 1.0), ("pressure", 0.9), ("muscle", 0.9), ("caused", 0.85), ("skin", 0.85), ("pain", 0.8), ("bone", 0.8), ("test", 0.75), ("person", 0.75), ("eye", 0.7), ("hormone", 0.7), ("substance", 0.65), ("sleep", 0.65), ("nerve", 0.65), ("condition", 0.6), ("abbreviation", 0.6), ("artery", 0.6), ("shoes", 0.6), ("running", 0.6), ("cancer", 0.55), ("cause", 0.55), ("gland", 0.5), ("vessels", 0.5), ("fat", 0.5)]
health_exercise = M.fromList [("crossfit", 3.05), ("exercise", 0.7), ("brain", 1.0), ("minute", 0.95), ("mile", 0.85), ("training", 0.85), ("weight", 0.8), ("ball", 0.75), ("reps", 0.75), ("walk", 0.7), ("traineo", 0.6), ("zen", 0.6), ("jog", 0.6), ("warmup", 0.6), ("dumbbell", 0.6), ("curls", 0.6), ("squats", 0.55), ("exercises", 0.55), ("barbell", 0.5), ("rate", 0.5), ("workout", 0.5), ("fitness", 0.5), ("walking", 0.5)]
health_nutrition = M.fromList [("food", 1.0), ("calories", 0.5), ("vitamin", 1.2), ("grams", 1.55), ("foods", 0.7), ("fat", 1.25), ("blood", 1.25), ("nutrition", 1.0), ("mckeith", 0.95), ("fats", 0.85), ("health", 0.6), ("weight", 0.8), ("diet", 0.75), ("protein", 0.7), ("cholesterol", 0.7), ("essential", 0.7), ("disease", 0.65), ("sugar", 0.65), ("nutrients", 0.6), ("heart", 0.6), ("antioxidant", 0.55), ("cells", 0.55), ("acid", 0.5)]
mathematics = M.fromList [("triangle", 4.5), ("angle", 4.5), ("angles", 4.3), ("terms", 4.3), ("fraction", 3.9), ("equal", 3.1), ("numbers", 2.85), ("lines", 2.45), ("line", 2.45), ("denominator", 2.45), ("axis", 2.25), ("coordinate", 2.05), ("expression", 2.05), ("equation", 1.85), ("root", 1.65), ("graph", 1.65), ("circle", 1.65), ("symbol", 1.4), ("sides", 1.4), ("inverse", 1.4), ("numerator", 1.4), ("multiplication", 1.4), ("theorem", 1.4), ("zero", 1.2), ("square", 1.2), ("multiplied", 1.2), ("pair", 1.2), ("contains", 1.2), ("distance", 1.2), ("segment", 1.2), ("negative", 1.2), ("fractions", 1.2), ("sum", 1.2), ("product", 1.2), ("mathematical", 1.2), ("multiple", 1.0), ("factor", 1.0), ("integer", 1.0), ("plane", 1.0), ("divided", 1.0), ("equals", 1.0), ("identity", 0.8), ("ordered", 0.8), ("items", 0.8), ("parallel", 0.8), ("positive", 0.8), ("decimal", 0.8), ("written", 0.8), ("evenly", 0.8), ("consists", 0.8), ("algebra", 0.8), ("opposite", 0.8), ("second", 0.8), ("multiplicative", 0.8), ("additive", 0.8), ("difference", 0.8), ("formula", 0.8), ("completeness", 0.8), ("intercept", 0.6), ("polygon", 0.6), ("equivalent", 0.6), ("events", 0.6), ("refers", 0.6), ("intersection", 0.6), ("plot", 0.6), ("obtuse", 0.6), ("counting", 0.6), ("average", 0.6), ("straight", 0.6), ("solution", 0.6), ("inside", 0.6), ("larger", 0.6), ("times", 0.6), ("digit", 0.6), ("notation", 0.6), ("original", 0.6), ("coordinates", 0.6), ("shape", 0.6), ("acute", 0.6), ("containing", 0.6), ("measures", 0.6), ("subtraction", 0.6), ("factors", 0.6), ("coefficient", 0.6), ("sign", 0.6), ("variable", 0.6), ("subtrahend", 0.6), ("order", 0.6), ("del", 0.6)]
music = M.fromList [("music", 2.4), ("musical", 2.9), ("notes", 2.1), ("composition", 2.0), ("played", 1.4), ("piece", 1.25), ("note", 1.25), ("performance", 1.15), ("melody", 1.1), ("tone", 0.95), ("musicians", 0.95), ("parts", 0.85), ("notation", 0.85), ("sound", 0.85), ("instrument", 0.8), ("composers", 0.8), ("instruments", 0.8), ("pitch", 0.8), ("art", 0.8), ("study", 0.75), ("performers", 0.75), ("beatles", 0.7), ("performed", 0.7), ("movement", 0.65), ("voice", 0.65), ("psychology", 0.65), ("perform", 0.65), ("performer", 0.65), ("jazz", 0.65), ("rock", 0.65), ("sonata", 0.65), ("period", 0.65), ("baroque", 0.65), ("artists", 0.6), ("musicology", 0.6), ("sheet", 0.6), ("scale", 0.55), ("chord", 0.55), ("play", 0.55), ("tones", 0.55), ("rhythm", 0.55), ("harmony", 0.55), ("solo", 0.55)]
news = M.fromList [("iran", 1.75), ("united", 1.05), ("story", 0.85), ("iraq", 0.8), ("chomsky", 0.7), ("oscar", 0.6), ("fark", 0.55), ("anchor", 0.5), ("slashdot", 0.5)]
news_economy = M.fromList [("debt", 1.7), ("money", 0.75), ("poverty", 0.75), ("capitalism", 0.55), ("economic", 0.55), ("tax", 0.55), ("government", 0.55), ("zillow", 0.55), ("poor", 0.55), ("economy", 0.55), ("socialism", 0.5)]
news_politics = M.fromList [("government", 1.55), ("libertarian", 0.65), ("society", 0.7), ("iran", 0.65), ("libertarians", 0.5), ("money", 0.6), ("political", 0.55)]
news_war = M.fromList [("iran", 2.95), ("war", 0.6), ("iraq", 1.35), ("united", 1.05), ("military", 0.8), ("nuclear", 0.75), ("israel", 0.7), ("attack", 0.65), ("bush", 0.65), ("bomb", 0.6), ("weapons", 0.55), ("government", 0.5)]
news_weather = M.fromList [("air", 3.05), ("weather", 2.0), ("pressure", 2.1), ("wind", 1.9), ("temperature", 1.8), ("water", 1.75), ("surface", 1.65), ("cloud", 1.25), ("atmosphere", 1.25), ("snow", 1.2), ("earth", 1.15), ("clouds", 1.1), ("winds", 1.1), ("ice", 1.05), ("rain", 0.85), ("precipitation", 0.8), ("cold", 0.8), ("forecast", 0.7), ("atmospheric", 0.65), ("layer", 0.65), ("level", 0.6), ("airport", 0.6), ("miles", 0.6), ("noaa", 0.6), ("storm", 0.6), ("ground", 0.6), ("sea", 0.6), ("conditions", 0.6), ("tropical", 0.55), ("vapor", 0.55), ("winter", 0.55), ("temperatures", 0.55), ("visibility", 0.55), ("hour", 0.55), ("warm", 0.55), ("region", 0.55), ("light", 0.5), ("opposite", 0.5), ("fog", 0.5)]
physics = M.fromList [("energy", 3.65), ("physics", 0.5), ("force", 2.75), ("motion", 2.45), ("temperature", 2.05), ("wave", 1.9), ("unit", 1.85), ("light", 1.75), ("mass", 1.65), ("waves", 1.6), ("equal", 1.45), ("heat", 1.25), ("matter", 1.25), ("quantum", 1.2), ("particles", 1.2), ("nucleus", 1.05), ("direction", 1.0), ("mechanics", 1.0), ("atom", 0.95), ("frequency", 0.9), ("electrons", 0.85), ("charge", 0.85), ("electric", 0.8), ("forces", 0.8), ("given", 0.8), ("constant", 0.8), ("medium", 0.8), ("distance", 0.75), ("potential", 0.75), ("quantity", 0.75), ("particle", 0.75), ("liquid", 0.7), ("electron", 0.7), ("magnetic", 0.7), ("surface", 0.7), ("scale", 0.7), ("substance", 0.7), ("proportional", 0.65), ("velocity", 0.65), ("sound", 0.65), ("molecules", 0.65), ("second", 0.6), ("volume", 0.6), ("gas", 0.55), ("required", 0.55), ("water", 0.55), ("phase", 0.55), ("speed", 0.55), ("line", 0.55), ("atoms", 0.55), ("acceleration", 0.5), ("materials", 0.5), ("earth", 0.5), ("physical", 0.5)]
religion = M.fromList [("smith", 2.4), ("god", 1.9), ("jesus", 1.9), ("religious", 1.85), ("christian", 1.7), ("prothero", 1.2), ("church", 0.7), ("christianity", 1.1), ("islam", 1.1), ("religion", 1.05), ("belief", 0.9), ("catholic", 0.9), ("judaism", 0.85), ("christ", 0.8), ("movement", 0.8), ("testament", 0.8), ("buddhism", 0.75), ("jewish", 0.75), ("churches", 0.75), ("christians", 0.65), ("tradition", 0.65), ("bible", 0.65), ("orthodox", 0.6), ("religions", 0.6), ("roman", 0.55), ("ce", 0.5), ("muslims", 0.5), ("jews", 0.5), ("faith", 0.5)]
religion_buddhism = M.fromList [("buddhism", 3.0), ("buddha", 2.85), ("buddhist", 2.3), ("mahayana", 1.1), ("meditation", 0.6), ("zen", 0.75), ("mindfulness", 0.65), ("tibetan", 0.6), ("dharma", 0.6)]
religion_christianity = M.fromList [("god", 2.25), ("christian", 2.15), ("jesus", 2.0), ("christians", 1.35), ("christianity", 1.0), ("religion", 0.85), ("church", 0.5), ("christ", 0.7), ("religious", 0.65), ("bible", 0.65), ("gay", 0.55)]
religion_hinduism = M.fromList [("hindu", 2.25), ("god", 1.8), ("hinduism", 1.45), ("mahabharata", 1.3), ("yoga", 1.15), ("swami", 1.05), ("india", 0.9), ("krishna", 0.9), ("vedas", 0.8), ("religion", 0.8), ("spiritual", 0.75), ("gita", 0.75), ("sri", 0.75), ("paksh", 0.7), ("vedic", 0.65), ("knowledge", 0.6), ("hindus", 0.6), ("brahman", 0.55)]
religion_islam = M.fromList [("islam", 3.7), ("islamic", 3.5), ("muhammad", 3.4), ("muslim", 2.7), ("god", 2.45), ("qur", 2.3), ("muslims", 2.3), ("allah", 1.4), ("mecca", 1.15), ("prophet", 0.5), ("prayer", 0.8), ("shi", 0.8), ("ali", 0.8), ("arabic", 0.7), ("imam", 0.65), ("faith", 0.65), ("religion", 0.6), ("sunnah", 0.55), ("sunni", 0.5)]
religion_judaism = M.fromList [("jewish", 7.85), ("jews", 3.25), ("judaism", 3.15), ("torah", 2.25), ("hebrew", 2.05), ("israel", 1.7), ("lit", 1.5), ("prayer", 0.95), ("yiddish", 0.85), ("religious", 0.85), ("orthodox", 0.8), ("god", 0.8), ("temple", 0.7), ("talmud", 0.6), ("shabbat", 0.6), ("passover", 0.55), ("jew", 0.55), ("yom", 0.55)]
sports = M.fromList [("ball", 0.6), ("racing", 3.1), ("sports", 0.7), ("boxing", 1.8), ("players", 2.5), ("football", 0.7), ("team", 2.2), ("oed", 2.1), ("sport", 0.5), ("contest", 1.55), ("score", 1.5), ("cites", 1.45), ("person", 1.45), ("hockey", 1.35), ("player", 1.35), ("dates", 1.25), ("tennis", 1.25), ("figurative", 1.15), ("boxer", 1.15), ("usage", 0.95), ("play", 0.95), ("win", 0.9), ("ahdi", 0.85), ("opponent", 0.85), ("basketball", 0.85), ("rugby", 0.5), ("competition", 0.8), ("goal", 0.75), ("count", 0.7), ("punch", 0.65), ("playing", 0.65), ("wrestling", 0.65), ("final", 0.6), ("handball", 0.6), ("throw", 0.6), ("baseball", 0.6), ("match", 0.6), ("olympic", 0.6), ("referee", 0.55), ("fight", 0.55), ("league", 0.55), ("opponents", 0.55), ("polo", 0.55), ("awarded", 0.5), ("hit", 0.5), ("compete", 0.5), ("pitch", 0.5), ("athletes", 0.5), ("non", 0.5), ("exercise", 0.5), ("rules", 0.5)]

onegrams = [("chemistry", chemistry), ("computers", computers), ("computers_ai", computers_ai), ("computers_ai_datamining", computers_ai_datamining), ("computers_ai_learning", computers_ai_learning), ("computers_ai_nlp", computers_ai_nlp), ("computers_ai_search", computers_ai_search), ("computers_ai_textmining", computers_ai_textmining), ("computers_microsoft", computers_microsoft), ("computers_programming", computers_programming), ("computers_programming_c++", computers_programming_cpp), ("computers_programming_java", computers_programming_java), ("computers_programming_lisp", computers_programming_lisp), ("computers_programming_ruby", computers_programming_ruby), ("economics", economics), ("health", health), ("health_exercise", health_exercise), ("health_nutrition", health_nutrition), ("mathematics", mathematics), ("music", music), ("news", news), ("news_economy", news_economy), ("news_politics", news_politics), ("news_war", news_war), ("news_weather", news_weather), ("physics", physics), ("religion", religion), ("religion_buddhism", religion_buddhism), ("religion_christianity", religion_christianity), ("religion_hinduism", religion_hinduism), ("religion_islam", religion_islam), ("religion_judaism", religion_judaism), ("sports", sports)]
