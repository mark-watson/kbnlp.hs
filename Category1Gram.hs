module Category1Gram (onegrams) where

import qualified Data.Map as M

chemistry = M.fromList [("chemical", 4.8), ("atoms", 3.45), ("reaction", 3.35), ("energy", 3.0), ("water", 2.75), ("substance", 2.55), ("electrons", 2.25), ("atom", 2.2), ("acid", 2.05), ("solution", 1.95), ("molecule", 1.85), ("ph", 1.7), ("liquid", 1.7), ("molecules", 1.65), ("carbon", 1.6), ("bond", 1.55), ("chemistry", 0.7), ("reactions", 1.35), ("substances", 1.35), ("compound", 1.3), ("elements", 1.25), ("organic", 1.2), ("ion", 1.15), ("atomic", 1.15), ("bonds", 1.05), ("hydrogen", 1.05), ("compounds", 1.05), ("wastewater", 1.0), ("ions", 1.0), ("temperature", 1.0), ("unit", 1.0), ("pressure", 0.95), ("mass", 0.95), ("matter", 0.95), ("acids", 0.9), ("electron", 0.9), ("treatment", 0.9), ("element", 0.85), ("solids", 0.85), ("oxidation", 0.85), ("molecular", 0.85), ("concentration", 0.8), ("oxygen", 0.8), ("sewage", 0.8), ("mole", 0.75), ("structure", 0.7), ("solid", 0.7), ("volume", 0.7), ("containing", 0.7), ("measure", 0.65), ("orbitals", 0.65), ("heat", 0.65), ("particles", 0.65), ("material", 0.65), ("light", 0.65), ("gas", 0.65)]
computers = M.fromList [("network", 1.95), ("software", 1.95), ("linux", 1.5), ("device", 1.45), ("computers", 1.35), ("storage", 1.2), ("line", 1.05), ("disk", 0.95), ("unit", 0.95), ("files", 0.85), ("record", 0.8), ("programs", 0.8), ("hardware", 0.75), ("key", 0.75), ("helpline", 0.75), ("structure", 0.75), ("characters", 0.7), ("medium", 0.7), ("mail", 0.7), ("terminal", 0.65), ("ibm", 0.65)]
computers_ai = M.fromList [("ai", 8.3), ("artificial", 1.5), ("intelligent", 1.6), ("knowledge", 0.7), ("science", 1.45), ("brain", 1.3), ("symbolic", 1.2), ("algorithms", 1.1), ("turing", 1.05), ("researchers", 1.05), ("networks", 1.0), ("reasoning", 1.0), ("thought", 0.85), ("chomsky", 0.8), ("vision", 0.75), ("approach", 0.75), ("level", 0.7), ("solving", 0.7), ("mccarthy", 0.65), ("neural", 0.65), ("computers", 0.65), ("mit", 0.65)]
computers_ai_datamining = M.fromList [("database", 2.65), ("databases", 0.75), ("terabytes", 1.5), ("patterns", 1.4), ("algorithms", 1.3), ("conference", 1.2), ("knowledge", 0.8), ("bayesian", 1.0), ("artificial", 0.95), ("discovery", 0.9), ("ai", 0.85), ("records", 0.8), ("algorithm", 0.65)]
computers_ai_learning = M.fromList [("neural", 2.05), ("ai", 2.5), ("networks", 2.4), ("brain", 2.25), ("artificial", 2.15), ("network", 1.9), ("knowledge", 1.55), ("neurons", 1.35), ("algorithms", 1.35), ("professor", 1.25), ("training", 1.1), ("patterns", 0.9), ("researchers", 0.8), ("tasks", 0.8), ("algorithm", 0.8), ("semantic", 0.65), ("neuron", 0.65), ("performance", 0.65), ("computational", 0.65), ("software", 0.65), ("algebra", 0.65)]
computers_ai_nlp = M.fromList [("nlp", 2.0), ("corpus", 0.95), ("tagger", 0.7)]
computers_ai_search = M.fromList [("cost", 6.15), ("node", 6.15), ("heuristic", 4.6), ("goal", 4.3), ("frontier", 2.75), ("ai", 2.45), ("sphinx", 1.85), ("lucene", 1.85), ("artificial", 1.8), ("guaranteed", 1.5), ("snippet", 1.5), ("googlebot", 1.5), ("solution", 1.2), ("exponential", 1.2), ("costs", 1.2), ("paths", 1.2), ("depth", 1.2), ("added", 1.2), ("neighbors", 1.2), ("lowest", 1.2), ("protocol", 1.2), ("exclusion", 1.2), ("robots", 0.9), ("complexity", 0.9), ("infinite", 0.9), ("exists", 0.9), ("actual", 0.9), ("intelligent", 0.9)]
computers_ai_textmining = M.fromList [("documents", 0.65), ("analytics", 0.75), ("dmoz", 1.15), ("training", 1.05), ("retrieval", 1.1), ("monash", 1.0), ("extraction", 1.0), ("database", 1.0), ("nakov", 0.9), ("categories", 0.9), ("clearforest", 0.9), ("preslav", 0.8), ("semantic", 0.65), ("clustering", 0.8), ("software", 0.8), ("algorithm", 0.75), ("knowledge", 0.65), ("acl", 0.65), ("entities", 0.65), ("technology", 0.65), ("proceedings", 0.65)]
computers_microsoft = M.fromList [("microsoft", 14.85), ("software", 1.4), ("playtech", 1.0), ("server", 0.95), ("disk", 0.7), ("boot", 0.7), ("gates", 0.65)]
computers_programming = M.fromList [("programming", 0.9), ("java", 1.85), ("lisp", 1.7), ("virusfree", 0.8), ("software", 0.7), ("scheme", 0.7), ("scala", 0.7), ("netbeans", 0.65), ("intellij", 0.65), ("eclipse", 0.65), ("ide", 0.65), ("compilers", 0.65), ("compiler", 0.65), ("programs", 0.55), ("algorithm", 0.4), ("code", 0.4), ("variables", 0.3), ("operators", 0.3), ("iteration", 0.3), ("discipline", 0.3), ("implementation", 0.3), ("modula", 0.3), ("modeling", 0.3), ("pascal", 0.3), ("pacman", 0.3), ("programmers", 0.2), ("debate", 0.2), ("requirements", 0.2), ("ibm", 0.2), ("ada", 0.2), ("dasl", 0.2)]
computers_programming_cpp = M.fromList [("code", 0.85), ("library", 0.25), ("programming", 0.65), ("compilers", 0.45), ("stroustrup", 0.45), ("virtual", 0.4), ("polymorphism", 0.3), ("compilation", 0.3), ("namespace", 0.25), ("cout", 0.25), ("templates", 0.2), ("overloading", 0.25), ("generic", 0.25), ("compiler", 0.25), ("compile", 0.25), ("stl", 0.25), ("implementation", 0.25), ("operator", 0.25), ("bjarne", 0.25), ("oriented", 0.25), ("template", 0.2), ("declarations", 0.2)]
computers_programming_java = M.fromList [("java", 0.25), ("code", 0.65), ("component", 0.65), ("swing", 0.55), ("api", 0.45), ("joda", 0.4), ("mdash", 0.4), ("gwt", 0.35), ("interface", 0.3), ("ranges", 0.25), ("implementation", 0.25), ("void", 0.25), ("delegate", 0.25), ("ibm", 0.2), ("register", 0.2), ("virtual", 0.2), ("existing", 0.2), ("string", 0.2)]
computers_programming_lisp = M.fromList [("lisp", 1.45), ("code", 0.55), ("lambda", 0.5), ("programming", 0.45), ("java", 0.3), ("expression", 0.3), ("liskell", 0.25), ("lists", 0.25)]
computers_programming_ruby = M.fromList [("ruby", 0.4), ("rails", 0.3), ("irb", 0.65), ("code", 0.4), ("mysql", 0.2), ("self", 0.2), ("def", 0.2), ("array", 0.2)]
economics = M.fromList [("economics", 3.1), ("goods", 3.05), ("cost", 0.8), ("price", 0.75), ("economic", 2.25), ("economy", 2.45), ("market", 0.85), ("demand", 2.0), ("money", 1.1), ("production", 1.45), ("policy", 1.4), ("resources", 1.35), ("quantity", 1.25), ("income", 0.85), ("markets", 1.15), ("looks", 1.15), ("total", 1.15), ("trade", 0.7), ("rate", 1.0), ("exchange", 0.8), ("taxes", 0.95), ("tax", 0.8), ("capital", 0.95), ("macroeconomics", 0.95), ("terms", 0.9), ("prices", 0.9), ("gives", 0.9), ("elasticity", 0.85), ("curve", 0.85), ("unemployment", 0.85), ("costs", 0.8), ("increase", 0.8), ("equilibrium", 0.8), ("government", 0.8), ("econometrics", 0.75), ("growth", 0.75), ("fairtax", 0.7), ("nobel", 0.7), ("austrian", 0.7), ("starting", 0.7), ("average", 0.7), ("subject", 0.7), ("economists", 0.7), ("definitions", 0.65), ("letter", 0.65), ("competition", 0.65), ("microeconomics", 0.65), ("labour", 0.65)]
health = M.fromList [("blood", 4.5), ("heart", 2.8), ("disease", 2.1), ("brain", 1.65), ("cells", 1.65), ("tissue", 1.3), ("pressure", 1.15), ("muscle", 1.1), ("caused", 1.1), ("skin", 1.05), ("pain", 1.05), ("bone", 1.0), ("test", 0.95), ("person", 0.95), ("eye", 0.9), ("hormone", 0.9), ("substance", 0.85), ("sleep", 0.85), ("nerve", 0.8), ("condition", 0.8), ("abbreviation", 0.75), ("artery", 0.75), ("shoes", 0.75), ("running", 0.75), ("cancer", 0.7), ("cause", 0.7), ("gland", 0.65), ("vessels", 0.65), ("fat", 0.65)]
health_exercise = M.fromList [("crossfit", 3.85), ("exercise", 0.9), ("brain", 1.25), ("minute", 1.2), ("mile", 1.1), ("training", 1.1), ("weight", 1.05), ("ball", 0.9), ("reps", 0.95), ("walk", 0.9), ("traineo", 0.8), ("zen", 0.8), ("jog", 0.8), ("warmup", 0.8), ("dumbbell", 0.75), ("curls", 0.75), ("squats", 0.7), ("exercises", 0.7), ("barbell", 0.65), ("rate", 0.65), ("workout", 0.65), ("fitness", 0.65), ("walking", 0.65)]
health_nutrition = M.fromList [("food", 1.25), ("calories", 0.65), ("vitamin", 1.5), ("grams", 1.95), ("foods", 0.9), ("fat", 1.55), ("blood", 1.55), ("nutrition", 1.25), ("mckeith", 1.2), ("fats", 1.1), ("health", 0.75), ("weight", 1.0), ("diet", 0.95), ("energy", 0.9), ("protein", 0.9), ("cholesterol", 0.9), ("essential", 0.85), ("disease", 0.8), ("sugar", 0.8), ("nutrients", 0.75), ("heart", 0.75), ("antioxidant", 0.65), ("cells", 0.65), ("acid", 0.65)]
mathematics = M.fromList [("triangle", 5.65), ("angle", 5.65), ("angles", 5.4), ("terms", 5.4), ("fraction", 4.9), ("equal", 3.85), ("numbers", 3.6), ("lines", 3.1), ("line", 3.05), ("denominator", 3.1), ("axis", 2.8), ("coordinate", 2.55), ("expression", 2.55), ("equation", 2.3), ("root", 2.05), ("graph", 2.05), ("circle", 2.05), ("symbol", 1.8), ("sides", 1.8), ("inverse", 1.8), ("numerator", 1.8), ("multiplication", 1.8), ("theorem", 1.8), ("zero", 1.55), ("square", 1.55), ("multiplied", 1.55), ("pair", 1.55), ("contains", 1.55), ("distance", 1.5), ("segment", 1.55), ("negative", 1.55), ("fractions", 1.55), ("sum", 1.55), ("product", 1.55), ("mathematical", 1.55), ("multiple", 1.25), ("factor", 1.25), ("integer", 1.25), ("plane", 1.25), ("divided", 1.25), ("equals", 1.25), ("identity", 1.0), ("ordered", 1.0), ("items", 1.0), ("parallel", 1.0), ("positive", 1.0), ("decimal", 1.0), ("written", 1.0), ("evenly", 1.0), ("consists", 1.0), ("algebra", 1.0), ("opposite", 1.0), ("second", 1.0), ("multiplicative", 1.0), ("additive", 1.0), ("difference", 1.0), ("formula", 1.0), ("completeness", 1.0), ("intercept", 0.75), ("polygon", 0.75), ("equivalent", 0.75), ("events", 0.75), ("refers", 0.75), ("intersection", 0.75), ("plot", 0.75), ("obtuse", 0.75), ("counting", 0.75), ("average", 0.75), ("straight", 0.75), ("solution", 0.75), ("inside", 0.75), ("larger", 0.75), ("times", 0.75), ("digit", 0.75), ("notation", 0.75), ("original", 0.75), ("coordinates", 0.75), ("shape", 0.75), ("acute", 0.75), ("containing", 0.75), ("measures", 0.75), ("subtraction", 0.75), ("factors", 0.75), ("coefficient", 0.75), ("sign", 0.75), ("variable", 0.75), ("subtrahend", 0.75), ("order", 0.75), ("del", 0.75)]
music = M.fromList [("music", 3.0), ("musical", 3.65), ("notes", 2.6), ("composition", 2.5), ("played", 1.8), ("piece", 1.6), ("note", 1.6), ("performance", 1.45), ("melody", 1.4), ("tone", 1.2), ("musicians", 1.2), ("parts", 1.05), ("notation", 1.05), ("sound", 1.05), ("instrument", 1.0), ("composers", 1.0), ("instruments", 1.0), ("pitch", 1.0), ("art", 1.0), ("study", 0.95), ("performers", 0.95), ("beatles", 0.9), ("performed", 0.9), ("movement", 0.8), ("voice", 0.8), ("psychology", 0.8), ("perform", 0.8), ("performer", 0.8), ("jazz", 0.8), ("rock", 0.8), ("sonata", 0.8), ("period", 0.8), ("baroque", 0.8), ("artists", 0.75), ("musicology", 0.75), ("sheet", 0.75), ("scale", 0.7), ("chord", 0.7), ("play", 0.7), ("tones", 0.7), ("rhythm", 0.7), ("harmony", 0.7), ("solo", 0.7)]
news = M.fromList [("iran", 2.2), ("united", 1.3), ("story", 1.1), ("iraq", 1.0), ("chomsky", 0.9), ("oscar", 0.8), ("fark", 0.65), ("anchor", 0.65), ("slashdot", 0.65)]
news_economy = M.fromList [("debt", 2.1), ("money", 0.95), ("poverty", 0.9), ("capitalism", 0.7), ("economic", 0.7), ("tax", 0.7), ("government", 0.7), ("zillow", 0.65), ("poor", 0.65), ("economy", 0.65), ("socialism", 0.65)]
news_politics = M.fromList [("government", 1.95), ("libertarian", 0.85), ("society", 0.9), ("iran", 0.8), ("libertarians", 0.65), ("money", 0.75), ("political", 0.7)]
news_war = M.fromList [("iran", 3.6), ("war", 0.75), ("iraq", 1.65), ("united", 1.3), ("weapons", 1.1), ("military", 1.0), ("attack", 1.0), ("nuclear", 0.95), ("israel", 0.85), ("bush", 0.8), ("bomb", 0.75), ("government", 0.65)]
news_weather = M.fromList [("air", 3.8), ("weather", 2.5), ("pressure", 2.6), ("wind", 2.35), ("temperature", 2.2), ("water", 2.2), ("surface", 2.1), ("cloud", 1.6), ("atmosphere", 1.6), ("snow", 1.5), ("earth", 1.45), ("clouds", 1.4), ("winds", 1.4), ("ice", 1.35), ("rain", 1.05), ("precipitation", 1.0), ("cold", 1.0), ("forecast", 0.85), ("atmospheric", 0.85), ("layer", 0.8), ("level", 0.8), ("airport", 0.8), ("miles", 0.75), ("noaa", 0.75), ("storm", 0.75), ("ground", 0.75), ("sea", 0.75), ("conditions", 0.75), ("tropical", 0.7), ("vapor", 0.7), ("winter", 0.7), ("temperatures", 0.7), ("visibility", 0.7), ("hour", 0.7), ("warm", 0.65), ("region", 0.65), ("light", 0.65), ("opposite", 0.65), ("fog", 0.65)]
physics = M.fromList [("energy", 4.55), ("physics", 0.65), ("force", 3.45), ("motion", 3.1), ("temperature", 2.55), ("wave", 2.35), ("unit", 2.35), ("light", 2.2), ("mass", 2.05), ("waves", 2.0), ("equal", 1.85), ("heat", 1.6), ("matter", 1.6), ("quantum", 1.5), ("particles", 1.5), ("nucleus", 1.3), ("direction", 1.25), ("mechanics", 1.25), ("atom", 1.2), ("frequency", 1.15), ("electrons", 1.1), ("charge", 1.1), ("electric", 1.05), ("forces", 1.05), ("given", 1.05), ("constant", 1.0), ("medium", 1.0), ("distance", 0.95), ("potential", 0.95), ("quantity", 0.95), ("particle", 0.95), ("liquid", 0.9), ("electron", 0.9), ("magnetic", 0.9), ("surface", 0.85), ("scale", 0.85), ("substance", 0.85), ("proportional", 0.85), ("velocity", 0.85), ("sound", 0.85), ("molecules", 0.8), ("second", 0.75), ("volume", 0.75), ("gas", 0.7), ("required", 0.7), ("water", 0.7), ("phase", 0.7), ("speed", 0.7), ("line", 0.65), ("atoms", 0.65), ("acceleration", 0.65), ("materials", 0.65), ("earth", 0.65), ("physical", 0.65)]
religion = M.fromList [("smith", 4.05), ("jesus", 3.05), ("religious", 3.0), ("god", 2.75), ("christian", 2.7), ("prothero", 2.05), ("church", 1.15), ("islam", 1.85), ("christianity", 1.8), ("religion", 1.55), ("catholic", 1.5), ("belief", 1.45), ("judaism", 1.45), ("christ", 1.4), ("testament", 1.35), ("buddhism", 1.3), ("churches", 0.7), ("movement", 1.3), ("jewish", 1.25), ("christians", 1.15), ("tradition", 1.1), ("bible", 1.1), ("orthodox", 1.0), ("roman", 0.95), ("religions", 0.95), ("ce", 0.9), ("jews", 0.85), ("muslims", 0.85), ("traditions", 0.75), ("sacred", 0.75), ("protestant", 0.75), ("muhammad", 0.75), ("united", 0.75), ("faith", 0.7), ("holy", 0.65), ("books", 0.65), ("hebrew", 0.65)]
religion_buddhism = M.fromList [("buddhism", 4.45), ("buddha", 4.45), ("buddhist", 3.05), ("mahayana", 1.8), ("meditation", 1.4), ("zen", 1.1), ("tibetan", 0.95), ("sanskrit", 0.85), ("sutra", 0.75), ("enlightenment", 0.75), ("suffering", 0.75), ("pali", 0.7), ("noble", 0.7), ("tradition", 0.7), ("pa", 0.65), ("dharma", 0.65), ("india", 0.65)]
religion_christianity = M.fromList [("jesus", 4.25), ("god", 4.2), ("christian", 3.5), ("christians", 2.75), ("church", 2.1), ("bible", 1.5), ("christ", 1.45), ("funny", 1.35), ("lefties", 1.35), ("belief", 1.15), ("christianity", 1.1), ("religious", 0.95), ("israel", 0.85), ("islamislam", 0.85), ("testament", 0.85), ("comes", 0.8), ("definition", 0.75), ("liberal", 0.75), ("eric", 0.7), ("holy", 0.7), ("paranoia", 0.65), ("matthew", 0.65), ("jewish", 0.65)]
religion_hinduism = M.fromList [("hindu", 3.65), ("yoga", 0.8), ("god", 0.8), ("shiva", 1.8), ("knowledge", 1.75), ("vedas", 1.5), ("vedic", 1.45), ("veda", 1.35), ("love", 1.3), ("stotram", 1.3), ("vishnu", 1.3), ("upanishad", 1.25), ("brahma", 1.25), ("brahman", 1.2), ("spiritual", 1.15), ("gita", 1.15), ("krishna", 1.1), ("upanishads", 1.05), ("self", 0.75), ("sri", 1.05), ("ramayana", 0.95), ("stories", 0.95), ("india", 0.9), ("mahabharata", 0.9), ("rama", 0.8), ("philosophy", 0.8), ("religion", 0.75), ("worship", 0.75), ("swami", 0.75), ("vedanta", 0.75), ("hinduism", 0.75), ("deity", 0.7), ("episodes", 0.7), ("sacred", 0.65)]
religion_islam = M.fromList [("muhammad", 6.25), ("islam", 5.3), ("god", 4.75), ("qur", 4.7), ("allah", 3.85), ("muslim", 3.55), ("muslims", 2.95), ("islamic", 2.95), ("prophet", 1.25), ("mecca", 2.15), ("prayer", 1.65), ("imam", 1.6), ("ali", 1.5), ("shi", 1.3), ("sunnah", 1.25), ("religion", 1.15), ("holy", 0.95), ("salat", 0.9), ("worship", 0.9), ("hadith", 0.75), ("arabic", 0.9), ("prayers", 0.8), ("ka", 0.75), ("obligatory", 0.75), ("place", 0.75), ("ite", 0.75), ("koran", 0.7), ("abraham", 0.7), ("hajj", 0.7), ("religious", 0.65), ("peace", 0.7), ("abu", 0.7), ("faith", 0.7)]
religion_judaism = M.fromList [("jewish", 10.5), ("judaism", 4.1), ("jews", 4.05), ("hebrew", 3.3), ("torah", 3.3), ("lit", 2.85), ("israel", 2.1), ("yiddish", 1.5), ("god", 1.25), ("prayer", 1.15), ("passover", 1.05), ("shabbat", 0.95), ("temple", 0.9), ("uh", 0.9), ("hah", 0.9), ("commandment", 0.9), ("yom", 0.9), ("orthodox", 0.9), ("talmud", 0.9), ("religious", 0.85), ("liturgy", 0.85), ("commandments", 0.75), ("synagogue", 0.75), ("person", 0.7), ("sukkot", 0.7), ("period", 0.7), ("ritual", 0.7), ("jew", 0.7), ("referred", 0.7), ("kippur", 0.7), ("nature", 0.65), ("pesach", 0.65)]
sports = M.fromList [("ball", 0.75), ("racing", 3.9), ("sports", 0.85), ("boxing", 2.25), ("players", 3.15), ("football", 0.85), ("team", 2.75), ("oed", 2.65), ("sport", 0.65), ("contest", 1.95), ("score", 1.85), ("cites", 1.8), ("person", 1.8), ("hockey", 1.7), ("player", 1.7), ("dates", 1.6), ("tennis", 1.6), ("figurative", 1.4), ("boxer", 1.4), ("usage", 1.2), ("play", 1.2), ("win", 1.15), ("ahdi", 1.1), ("opponent", 1.1), ("basketball", 1.1), ("rugby", 0.65), ("competition", 1.05), ("goal", 0.9), ("count", 0.85), ("punch", 0.8), ("playing", 0.8), ("wrestling", 0.8), ("final", 0.75), ("handball", 0.75), ("throw", 0.75), ("baseball", 0.75), ("match", 0.75), ("olympic", 0.75), ("referee", 0.7), ("fight", 0.7), ("league", 0.7), ("opponents", 0.7), ("polo", 0.7), ("awarded", 0.65), ("hit", 0.65), ("compete", 0.65), ("pitch", 0.65), ("athletes", 0.65), ("non", 0.65), ("exercise", 0.65), ("rules", 0.65)]

onegrams = [("chemistry", chemistry), ("computers", computers), ("computers_ai", computers_ai), ("computers_ai_datamining", computers_ai_datamining), ("computers_ai_learning", computers_ai_learning), ("computers_ai_nlp", computers_ai_nlp), ("computers_ai_search", computers_ai_search), ("computers_ai_textmining", computers_ai_textmining), ("computers_microsoft", computers_microsoft), ("computers_programming", computers_programming), ("computers_programming_c++", computers_programming_cpp), ("computers_programming_java", computers_programming_java), ("computers_programming_lisp", computers_programming_lisp), ("computers_programming_ruby", computers_programming_ruby), ("economics", economics), ("health", health), ("health_exercise", health_exercise), ("health_nutrition", health_nutrition), ("mathematics", mathematics), ("music", music), ("news", news), ("news_economy", news_economy), ("news_politics", news_politics), ("news_war", news_war), ("news_weather", news_weather), ("physics", physics), ("religion", religion), ("religion_buddhism", religion_buddhism), ("religion_christianity", religion_christianity), ("religion_hinduism", religion_hinduism), ("religion_islam", religion_islam), ("religion_judaism", religion_judaism), ("sports", sports)]
